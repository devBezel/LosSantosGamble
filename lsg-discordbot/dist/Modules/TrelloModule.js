"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const trello_node_api_1 = __importDefault(require("../../node_modules/trello-node-api"));
const Config_1 = require("../Config");
const trello = new trello_node_api_1.default();
exports.listRequest = async (listId) => {
    trello.setApiKey(Config_1.trelloApiKey);
    trello.setOauthToken(Config_1.trelloOAuthToken);
    let res;
    await trello.list.search(listId).then((response) => {
        console.log(response);
        res = response;
    }, error => {
        console.log(error);
    });
    return res;
};
exports.getTrelloBoardLists = async (boardId) => {
    trello.setApiKey(Config_1.trelloApiKey);
    trello.setOauthToken(Config_1.trelloOAuthToken);
    let res;
    await trello.board.searchLists(boardId).then((response) => {
        res = response;
    }, error => {
        console.log(error);
    });
    return res;
};
exports.createTrelloList = async (name, boardId) => {
    trello.setApiKey(Config_1.trelloApiKey);
    trello.setOauthToken(Config_1.trelloOAuthToken);
    const data = {
        name: name,
        idBoard: boardId,
    };
    let reponse;
    await trello.list.create(data).then((response) => {
        console.log(reponse);
    }, error => {
        console.log(error);
    });
};
exports.createTrelloCardForList = async (listId, content, description) => {
    trello.setApiKey(Config_1.trelloApiKey);
    trello.setOauthToken(Config_1.trelloOAuthToken);
    const data = {
        name: content,
        desc: description,
        idList: listId
    };
    let response;
    await trello.card.create(data).then((res) => {
        response = res;
    }, error => {
        console.log(error);
    });
    return response;
};
// export const getCardsFromListRequest = async (listId: string) => {
//     trello.setApiKey('0d62ed37fd938f7c0663cdb46dac5dbe');
//     trello.setOauthToken('39131d2a0e9e7a93848a11f0d355d023e644f6f045db79857d91722ae9609453');
//     let res;
//     await trello.list.(listId)
// }
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJlbGxvTW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL01vZHVsZXMvVHJlbGxvTW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseUZBQStEO0FBQy9ELHNDQUE2RDtBQUc3RCxNQUFNLE1BQU0sR0FBRyxJQUFJLHlCQUFhLEVBQUUsQ0FBQztBQU10QixRQUFBLFdBQVcsR0FBRyxLQUFLLEVBQUUsTUFBYyxFQUFFLEVBQUU7SUFDaEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxxQkFBWSxDQUFDLENBQUM7SUFDL0IsTUFBTSxDQUFDLGFBQWEsQ0FBQyx5QkFBZ0IsQ0FBQyxDQUFDO0lBR3ZDLElBQUksR0FBRyxDQUFDO0lBQ1IsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUF5QixFQUFFLEVBQUU7UUFDaEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QixHQUFHLEdBQUcsUUFBUSxDQUFDO0lBQ25CLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRTtRQUNQLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUMsQ0FBQTtBQUVZLFFBQUEsbUJBQW1CLEdBQUcsS0FBSyxFQUFFLE9BQWUsRUFBRSxFQUFFO0lBQ3pELE1BQU0sQ0FBQyxTQUFTLENBQUMscUJBQVksQ0FBQyxDQUFDO0lBQy9CLE1BQU0sQ0FBQyxhQUFhLENBQUMseUJBQWdCLENBQUMsQ0FBQztJQUV2QyxJQUFJLEdBQUcsQ0FBQztJQUNSLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBMkIsRUFBRSxFQUFFO1FBQ3pFLEdBQUcsR0FBRyxRQUFRLENBQUM7SUFDbkIsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFO1FBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQTtJQUVGLE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQyxDQUFDO0FBRVcsUUFBQSxnQkFBZ0IsR0FBRyxLQUFLLEVBQUUsSUFBWSxFQUFFLE9BQWUsRUFBRSxFQUFFO0lBQ3BFLE1BQU0sQ0FBQyxTQUFTLENBQUMscUJBQVksQ0FBQyxDQUFDO0lBQy9CLE1BQU0sQ0FBQyxhQUFhLENBQUMseUJBQWdCLENBQUMsQ0FBQztJQUV2QyxNQUFNLElBQUksR0FBUTtRQUNkLElBQUksRUFBRSxJQUFJO1FBQ1YsT0FBTyxFQUFFLE9BQU87S0FDbkIsQ0FBQztJQUVGLElBQUksT0FBTyxDQUFDO0lBQ1osTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFhLEVBQUUsRUFBRTtRQUNsRCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pCLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRTtRQUNQLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUM7QUFFVyxRQUFBLHVCQUF1QixHQUFHLEtBQUssRUFBRSxNQUFjLEVBQUUsT0FBZSxFQUFFLFdBQW1CLEVBQUUsRUFBRTtJQUNsRyxNQUFNLENBQUMsU0FBUyxDQUFDLHFCQUFZLENBQUMsQ0FBQztJQUMvQixNQUFNLENBQUMsYUFBYSxDQUFDLHlCQUFnQixDQUFDLENBQUM7SUFFdkMsTUFBTSxJQUFJLEdBQVE7UUFDZCxJQUFJLEVBQUUsT0FBTztRQUNiLElBQUksRUFBRSxXQUFXO1FBQ2pCLE1BQU0sRUFBRSxNQUFNO0tBQ2pCLENBQUM7SUFFRixJQUFJLFFBQVEsQ0FBQztJQUNiLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7UUFDN0MsUUFBUSxHQUFHLEdBQUcsQ0FBQztJQUNuQixDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUU7UUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxRQUFRLENBQUM7QUFDcEIsQ0FBQyxDQUFDO0FBRUYscUVBQXFFO0FBQ3JFLDREQUE0RDtBQUM1RCxnR0FBZ0c7QUFFaEcsZUFBZTtBQUNmLGlDQUFpQztBQUNqQyxJQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRyZWxsb05vZGVBUEkgZnJvbSAnLi4vLi4vbm9kZV9tb2R1bGVzL3RyZWxsby1ub2RlLWFwaSc7XHJcbmltcG9ydCAgeyB0cmVsbG9PQXV0aFRva2VuLCB0cmVsbG9BcGlLZXkgfSAgZnJvbSAnLi4vQ29uZmlnJztcclxuaW1wb3J0IHsgVHJlbGxvTGlzdE1vZGVsIH0gZnJvbSAnLi4vTW9kZWxzL1RyZWxsb0xpc3RNb2RlbCc7XHJcblxyXG5jb25zdCB0cmVsbG8gPSBuZXcgVHJlbGxvTm9kZUFQSSgpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBsaXN0UmVxdWVzdCA9IGFzeW5jIChsaXN0SWQ6IHN0cmluZykgPT4ge1xyXG4gICAgdHJlbGxvLnNldEFwaUtleSh0cmVsbG9BcGlLZXkpO1xyXG4gICAgdHJlbGxvLnNldE9hdXRoVG9rZW4odHJlbGxvT0F1dGhUb2tlbik7XHJcblxyXG5cclxuICAgIGxldCByZXM7XHJcbiAgICBhd2FpdCB0cmVsbG8ubGlzdC5zZWFyY2gobGlzdElkKS50aGVuKChyZXNwb25zZTogVHJlbGxvTGlzdE1vZGVsKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4gICAgICAgIHJlcyA9IHJlc3BvbnNlO1xyXG4gICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRUcmVsbG9Cb2FyZExpc3RzID0gYXN5bmMgKGJvYXJkSWQ6IHN0cmluZykgPT4ge1xyXG4gICAgdHJlbGxvLnNldEFwaUtleSh0cmVsbG9BcGlLZXkpO1xyXG4gICAgdHJlbGxvLnNldE9hdXRoVG9rZW4odHJlbGxvT0F1dGhUb2tlbik7XHJcblxyXG4gICAgbGV0IHJlcztcclxuICAgIGF3YWl0IHRyZWxsby5ib2FyZC5zZWFyY2hMaXN0cyhib2FyZElkKS50aGVuKChyZXNwb25zZTogVHJlbGxvTGlzdE1vZGVsW10pID0+IHtcclxuICAgICAgICByZXMgPSByZXNwb25zZTtcclxuICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICB9KVxyXG5cclxuICAgIHJldHVybiByZXM7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlVHJlbGxvTGlzdCA9IGFzeW5jIChuYW1lOiBzdHJpbmcsIGJvYXJkSWQ6IHN0cmluZykgPT4ge1xyXG4gICAgdHJlbGxvLnNldEFwaUtleSh0cmVsbG9BcGlLZXkpO1xyXG4gICAgdHJlbGxvLnNldE9hdXRoVG9rZW4odHJlbGxvT0F1dGhUb2tlbik7XHJcblxyXG4gICAgY29uc3QgZGF0YTogYW55ID0ge1xyXG4gICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgaWRCb2FyZDogYm9hcmRJZCxcclxuICAgIH07XHJcblxyXG4gICAgbGV0IHJlcG9uc2U7XHJcbiAgICBhd2FpdCB0cmVsbG8ubGlzdC5jcmVhdGUoZGF0YSkudGhlbigocmVzcG9uc2U6IGFueSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHJlcG9uc2UpO1xyXG4gICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRyZWxsb0NhcmRGb3JMaXN0ID0gYXN5bmMgKGxpc3RJZDogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcsIGRlc2NyaXB0aW9uOiBzdHJpbmcpID0+IHtcclxuICAgIHRyZWxsby5zZXRBcGlLZXkodHJlbGxvQXBpS2V5KTtcclxuICAgIHRyZWxsby5zZXRPYXV0aFRva2VuKHRyZWxsb09BdXRoVG9rZW4pO1xyXG5cclxuICAgIGNvbnN0IGRhdGE6IGFueSA9IHtcclxuICAgICAgICBuYW1lOiBjb250ZW50LFxyXG4gICAgICAgIGRlc2M6IGRlc2NyaXB0aW9uLFxyXG4gICAgICAgIGlkTGlzdDogbGlzdElkXHJcbiAgICB9O1xyXG5cclxuICAgIGxldCByZXNwb25zZTtcclxuICAgIGF3YWl0IHRyZWxsby5jYXJkLmNyZWF0ZShkYXRhKS50aGVuKChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgIHJlc3BvbnNlID0gcmVzO1xyXG4gICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiByZXNwb25zZTtcclxufTtcclxuXHJcbi8vIGV4cG9ydCBjb25zdCBnZXRDYXJkc0Zyb21MaXN0UmVxdWVzdCA9IGFzeW5jIChsaXN0SWQ6IHN0cmluZykgPT4ge1xyXG4vLyAgICAgdHJlbGxvLnNldEFwaUtleSgnMGQ2MmVkMzdmZDkzOGY3YzA2NjNjZGI0NmRhYzVkYmUnKTtcclxuLy8gICAgIHRyZWxsby5zZXRPYXV0aFRva2VuKCczOTEzMWQyYTBlOWU3YTkzODQ4YTExZjBkMzU1ZDAyM2U2NDRmNmYwNDVkYjc5ODU3ZDkxNzIyYWU5NjA5NDUzJyk7XHJcblxyXG4vLyAgICAgbGV0IHJlcztcclxuLy8gICAgIGF3YWl0IHRyZWxsby5saXN0LihsaXN0SWQpXHJcbi8vIH0iXX0=